Index: Tests/UnitTests/src/cliparsertest.h
===================================================================
--- Tests/UnitTests/src/cliparsertest.h	(revision 13480)
+++ Tests/UnitTests/src/cliparsertest.h	(working copy)
@@ -84,6 +84,7 @@
     virtual bool DoWatch(const WatchBitset& options, const WatchBitset& settings, const int wmeSetting, const int learnSetting) { return false; }
     virtual bool DoWatchWMEs(const eWatchWMEsMode mode, WatchWMEsTypeBitset type, const std::string* pIdString = 0, const std::string* pAttributeString = 0, const std::string* pValueString = 0) { return false; }
     virtual bool DoWMA( const char pOp = 0, const std::string *pAttr = 0, const std::string *pVal = 0 ) { return false; }
+    virtual bool DoSVS( const std::vector<std::string> &args) { return false; }
 };
 
 class CliEcho : public CliAdapter
Index: Core/SoarKernel/src/agent.cpp
===================================================================
--- Core/SoarKernel/src/agent.cpp	(revision 13480)
+++ Core/SoarKernel/src/agent.cpp	(working copy)
@@ -52,6 +52,7 @@
 #include "wma.h"
 #include "episodic_memory.h"
 #include "semantic_memory.h"
+#include "svs.h"
 
 
 /* ================================================================== */
@@ -136,6 +137,8 @@
 
   reset_statistics (thisAgent);
 
+  thisAgent->svs_instance = new svs(thisAgent);
+
   /* RDF: For gSKI */
   init_agent_memory(thisAgent);
   /* END */
@@ -506,6 +509,8 @@
 
   delete delete_agent->smem_db;
 
+  delete delete_agent->svs_instance;
+
   // cleanup statistics db
   stats_close( delete_agent );
   delete delete_agent->stats_db;
Index: Core/SoarKernel/src/decide.cpp
===================================================================
--- Core/SoarKernel/src/decide.cpp	(revision 13480)
+++ Core/SoarKernel/src/decide.cpp	(working copy)
@@ -61,6 +61,7 @@
 
 #include "episodic_memory.h"
 #include "semantic_memory.h"
+#include "svs.h"
 
 #include "assert.h"
 
@@ -2262,7 +2263,8 @@
   symbol_remove_ref( thisAgent, goal->id.smem_header );
   free_with_pool( &( thisAgent->smem_info_pool ), goal->id.smem_info );
 
-
+  thisAgent->svs_instance->state_deletion_callback(goal);
+  
   /* REW: BUG
    * Tentative assertions can exist for removed goals.  However, it looks
    * like the removal forces a tentative retraction, which then leads to
@@ -2391,6 +2393,8 @@
   soar_invoke_callbacks(thisAgent, 
                        CREATE_NEW_CONTEXT_CALLBACK, 
                        static_cast<soar_call_data>(id) );
+  
+  thisAgent->svs_instance->state_creation_callback(id);
 }
 
 /* ------------------------------------------------------------------
Index: Core/SoarKernel/src/init_soar.cpp
===================================================================
--- Core/SoarKernel/src/init_soar.cpp	(revision 13480)
+++ Core/SoarKernel/src/init_soar.cpp	(working copy)
@@ -42,6 +42,7 @@
 #include "wma.h"
 #include "episodic_memory.h"
 #include "semantic_memory.h"
+#include "svs.h"
 
 /* REW: begin 08.20.97   these defined in consistency.c  */
 extern void determine_highest_active_production_level_in_stack_propose(agent* thisAgent);
@@ -598,6 +599,8 @@
 		  BEFORE_INPUT_PHASE_CALLBACK,
 		  reinterpret_cast<soar_call_data>(INPUT_PHASE));
 
+	  thisAgent->svs_instance->input_callback();
+
       do_input_cycle(thisAgent);
 
 	  thisAgent->run_phase_count++ ;
@@ -923,6 +926,8 @@
 			 BEFORE_OUTPUT_PHASE_CALLBACK,
 			 reinterpret_cast<soar_call_data>(OUTPUT_PHASE) );
  
+	  thisAgent->svs_instance->output_callback();
+
 	  /** KJC June 05:  moved output function timers into do_output_cycle ***/
 
 	  do_output_cycle(thisAgent);
Index: Core/SoarKernel/src/agent.h
===================================================================
--- Core/SoarKernel/src/agent.h	(revision 13480)
+++ Core/SoarKernel/src/agent.h	(working copy)
@@ -135,6 +135,7 @@
 typedef char * test;
 
 class stats_statement_container;
+class svs;
 
 typedef struct agent_struct {
   /* After v8.6.1, all conditional compilations were removed
@@ -955,6 +956,7 @@
   // Soar execution will be interrupted when this substate level is removed
   goal_stack_level substate_break_level;
 
+  svs *svs_instance;
 } agent;
 /*************** end of agent struct *****/
 
Index: Core/CLI/src/cli_CommandLineInterface.cpp
===================================================================
--- Core/CLI/src/cli_CommandLineInterface.cpp	(revision 13480)
+++ Core/CLI/src/cli_CommandLineInterface.cpp	(working copy)
@@ -110,6 +110,7 @@
     m_Parser.AddCommand(new cli::WatchCommand(*this));
     m_Parser.AddCommand(new cli::WatchWMEsCommand(*this));
     m_Parser.AddCommand(new cli::WMACommand(*this));
+    m_Parser.AddCommand(new cli::SVSCommand(*this));
 }
 
 EXPORT CommandLineInterface::~CommandLineInterface() 
Index: Core/CLI/src/cli_svs.cpp
===================================================================
--- Core/CLI/src/cli_svs.cpp	(revision 0)
+++ Core/CLI/src/cli_svs.cpp	(revision 0)
@@ -0,0 +1,21 @@
+#include "cli_CommandLineInterface.h"
+#include "sml_AgentSML.h"
+#include "agent.h"
+#include "svs.h"
+
+using namespace cli;
+using namespace sml;
+
+bool CommandLineInterface::DoSVS(const std::vector<std::string> &args) {
+    std::string out;
+    bool res = m_pAgentSML->GetSoarAgent()->svs_instance->do_cli_command(args, out);
+    if ( m_RawOutput )
+    {
+        m_Result << out << std::endl;
+    }
+    else
+    {
+        AppendArgTagFast( sml_Names::kParamValue, sml_Names::kTypeString, out.c_str() );
+    }
+    return res;
+}
Index: Core/CLI/src/cli_CommandLineInterface.h
===================================================================
--- Core/CLI/src/cli_CommandLineInterface.h	(revision 13480)
+++ Core/CLI/src/cli_CommandLineInterface.h	(working copy)
@@ -182,6 +182,7 @@
         virtual bool DoWatch(const WatchBitset& options, const WatchBitset& settings, const int wmeSetting, const int learnSetting);
         virtual bool DoWatchWMEs(const eWatchWMEsMode mode, WatchWMEsTypeBitset type, const std::string* pIdString = 0, const std::string* pAttributeString = 0, const std::string* pValueString = 0);
         virtual bool DoWMA( const char pOp = 0, const std::string *pAttr = 0, const std::string *pVal = 0 );
+        bool DoSVS(const std::vector<std::string> &args);
 
         // utility for kernel SML
         bool IsLogOpen();
Index: Core/CLI/src/cli_Cli.h
===================================================================
--- Core/CLI/src/cli_Cli.h	(revision 13480)
+++ Core/CLI/src/cli_Cli.h	(working copy)
@@ -479,6 +479,8 @@
          * @param pVal the value to set, pass 0 (null) only if no pOp (all config), get, or stats
          */
         virtual bool DoRL( const char pOp = 0, const std::string *pAttr = 0, const std::string *pVal = 0 ) = 0;
+        
+        virtual bool DoSVS(const std::vector<std::string> &args) = 0;
 
         enum eRunOptions 
         {
Index: Core/CLI/src/cli_Commands.h
===================================================================
--- Core/CLI/src/cli_Commands.h	(revision 13480)
+++ Core/CLI/src/cli_Commands.h	(working copy)
@@ -4348,7 +4348,27 @@
 
         WMACommand& operator=(const WMACommand&);
     };
+    
+    class SVSCommand : public cli::ParserCommand
+    {
+    public:
+        SVSCommand(cli::Cli& cli) : cli(cli), ParserCommand() {}
+        virtual ~SVSCommand() {}
+        virtual const char* GetString() const { return "svs"; }
+        virtual const char* GetSyntax() const 
+        {
+            return "Syntax: svs <elements to inspect>";
+        }
 
+        virtual bool Parse(std::vector< std::string > &argv)
+        {
+            return cli.DoSVS(argv);
+        }
+
+    private:
+        cli::Cli& cli;
+    };
+
 }
 
 #endif // CLI_COMMANDS_H
Index: Core/CLI/CommandLineInterface.cxx
===================================================================
--- Core/CLI/CommandLineInterface.cxx	(revision 13480)
+++ Core/CLI/CommandLineInterface.cxx	(working copy)
@@ -72,3 +72,4 @@
 #include "src/cli_watchwmes.cpp"
 #include "src/cli_wma.cpp"
 #include "src/cli_CommandLineInterface.cpp"
+#include "src/cli_svs.cpp"
Index: Core/SConscript
===================================================================
--- Core/SConscript	(revision 13480)
+++ Core/SConscript	(working copy)
@@ -1,4 +1,4 @@
-import sys, os
+import sys, os, platform
 import subprocess as sub
 import itertools as itl
 
@@ -27,8 +27,20 @@
 elif os.name == 'nt':
 	libs = ['advapi32']
 
-kernel_env.Replace(LIBS = libs, LIBPATH=[])
+if sys.platform.startswith('linux'):
+	if '64' in platform.machine():
+		bullet_lib = '#Core/SVS/bullet/lib64'
+	else:
+		bullet_lib = '#Core/SVS/bullet/lib32'
 
+	kernel_env.Replace(
+		LIBS = libs, 
+		LIBPATH = [bullet_lib],
+		LINKFLAGS = ['-Wl,--whole-archive','-lLinearMath','-lBulletCollision','-Wl,--no-whole-archive'],
+	)
+else:
+	kernel_env.Replace(LIBS = libs + ['BulletCollision', 'LinearMath'])
+
 if sys.platform == 'darwin':
 	install_name = os.path.join('@loader_path', env['LIBPREFIX'] + 'Soar' + env['SHLIBSUFFIX'])
 	kernel_env.Append(LINKFLAGS = ['-install_name', install_name])
@@ -60,6 +72,10 @@
 if compiler == 'msvc':
 	srcs['pcre'] = ('pcre/pcre.cxx', Glob('pcre/*.c'))
 
+svs_src, svs_inc = SConscript('SVS/SConscript')
+srcs['svs'] = (svs_src, svs_src)
+kernel_env.Prepend(CPPPATH = svs_inc)
+
 if GetOption('static'):
 	kernel_env.Append(CPPFLAGS=static_macro)
 	soarlib = kernel_env.Library('Soar', [srcs[c][scu] for c in srcs])
Index: Core/ClientSML/src/sml_ClientAgent.h
===================================================================
--- Core/ClientSML/src/sml_ClientAgent.h	(revision 13480)
+++ Core/ClientSML/src/sml_ClientAgent.h	(working copy)
@@ -790,6 +790,9 @@
 	*************************************************************/
 	bool ExecuteCommandLineXML(char const* pCommandLine, ClientAnalyzedXML* pResponse) ;
 
+	void        SendSVSInput(const std::string &txt);
+	std::string GetSVSOutput();
+	
 	/*************************************************************
 	* @brief Get last command line result
 	*
Index: Core/ClientSML/src/sml_ClientKernel.h
===================================================================
--- Core/ClientSML/src/sml_ClientKernel.h	(revision 13480)
+++ Core/ClientSML/src/sml_ClientKernel.h	(working copy)
@@ -947,6 +947,8 @@
 	*************************************************************/
 	static Kernel* CreateEmbeddedConnection(bool clientThread, bool optimized, int portToListenOn) ;
 
+	void        SendSVSInput(const char* agentName, const std::string &txt);
+	std::string GetSVSOutput(const char* agentName);
 };
 
 }//closes namespace
Index: Core/ClientSML/src/sml_ClientAgent.cpp
===================================================================
--- Core/ClientSML/src/sml_ClientAgent.cpp	(revision 13480)
+++ Core/ClientSML/src/sml_ClientAgent.cpp	(working copy)
@@ -1422,3 +1422,11 @@
 	}
 	return pClientIdentifier;
 }
+
+void Agent::SendSVSInput(const std::string &txt) {
+	GetKernel()->SendSVSInput(GetAgentName(), txt);
+}
+
+std::string Agent::GetSVSOutput() {
+	return GetKernel()->GetSVSOutput(GetAgentName());
+}
Index: Core/ClientSML/src/sml_ClientKernel.cpp
===================================================================
--- Core/ClientSML/src/sml_ClientKernel.cpp	(revision 13480)
+++ Core/ClientSML/src/sml_ClientKernel.cpp	(working copy)
@@ -2335,3 +2335,18 @@
 
 	return resultString;
 }
+
+void Kernel::SendSVSInput(const char* agentName, const std::string &txt) {
+	AnalyzeXML response;
+	GetConnection()->SendAgentCommand(&response, sml_Names::kCommand_SVSInput, agentName, sml_Names::kParamLine, txt.c_str() );
+}
+
+std::string Kernel::GetSVSOutput(const char* agentName) {
+	AnalyzeXML response;
+	if (GetConnection()->SendAgentCommand(&response, sml_Names::kCommand_SVSOutput, agentName, sml_Names::kParamLine, NULL))
+	{
+		return response.GetResultString();
+	} else {
+		return "";
+	}
+}
Index: Core/ConnectionSML/src/sml_Names.cpp
===================================================================
--- Core/ConnectionSML/src/sml_Names.cpp	(revision 13480)
+++ Core/ConnectionSML/src/sml_Names.cpp	(working copy)
@@ -450,3 +450,6 @@
 
 // command line interface
 char const* const sml_Names::kCommand_CommandLine		 = "cmdline" ;
+
+char const* const sml_Names::kCommand_SVSInput   = "svs_input";
+char const* const sml_Names::kCommand_SVSOutput  = "svs_output";
Index: Core/ConnectionSML/src/sml_Names.h
===================================================================
--- Core/ConnectionSML/src/sml_Names.h	(revision 13480)
+++ Core/ConnectionSML/src/sml_Names.h	(working copy)
@@ -440,6 +440,9 @@
 
 	// Command line interface
 	static char const* const kCommand_CommandLine ;
+	
+	static char const* const kCommand_SVSInput ;
+	static char const* const kCommand_SVSOutput ;
 } ;
 
 }
Index: Core/KernelSML/src/sml_KernelSML.h
===================================================================
--- Core/KernelSML/src/sml_KernelSML.h	(revision 13480)
+++ Core/KernelSML/src/sml_KernelSML.h	(working copy)
@@ -451,6 +451,10 @@
 	// Note: Register and unregister are both sent to this one handler
 	bool HandleRegisterForEvent(AgentSML* pAgentSML, char const* pCommandName, Connection* pConnection, AnalyzeXML* pIncoming, soarxml::ElementXML* pResponse) ;
 
+	bool HandleSVSInput(AgentSML* pAgentSML, char const* pCommandName, Connection* pConnection, AnalyzeXML* pIncoming, soarxml::ElementXML* pResponse) ;
+
+	bool HandleSVSOutput(AgentSML* pAgentSML, char const* pCommandName, Connection* pConnection, AnalyzeXML* pIncoming, soarxml::ElementXML* pResponse) ;
+
 };
 
 }
Index: Core/KernelSML/src/sml_KernelSMLHandlers.cpp
===================================================================
--- Core/KernelSML/src/sml_KernelSMLHandlers.cpp	(revision 13480)
+++ Core/KernelSML/src/sml_KernelSMLHandlers.cpp	(working copy)
@@ -34,6 +34,7 @@
 #include <stdlib.h>
 #include <assert.h>
 #include <algorithm>
+#include <sstream>
 #include "xml.h"
 
 using namespace sml ;
@@ -67,6 +68,8 @@
 	m_CommandMap[sml_Names::kCommand_GetInitialTimeTag] = &sml::KernelSML::HandleGetInitialTimeTag ;
 	m_CommandMap[sml_Names::kCommand_ConvertIdentifier] = &sml::KernelSML::HandleConvertIdentifier;
 	m_CommandMap[sml_Names::kCommand_GetListenerPort]	= &sml::KernelSML::HandleGetListenerPort;
+	m_CommandMap[sml_Names::kCommand_SVSInput] = &sml::KernelSML::HandleSVSInput;
+	m_CommandMap[sml_Names::kCommand_SVSOutput] = &sml::KernelSML::HandleSVSOutput;
 }
 
 /*************************************************************
@@ -927,3 +930,22 @@
 {
 	return this->ReturnIntResult(pConnection, pResponse, this->GetListenerPort());
 }
+
+bool KernelSML::HandleSVSInput(AgentSML* pAgentSML, char const* pCommandName, Connection* pConnection, AnalyzeXML* pIncoming, soarxml::ElementXML* pResponse)
+{
+	// Get the parameters
+	char const* pLine = pIncoming->GetArgString(sml_Names::kParamLine) ;
+	if (!pLine)
+	{
+		return InvalidArg(pConnection, pResponse, pCommandName, "Command line missing") ;
+	}
+	pAgentSML->GetSoarAgent()->svs_instance->add_input(pLine);
+	return true;
+}
+
+bool KernelSML::HandleSVSOutput(AgentSML* pAgentSML, char const* pCommandName, Connection* pConnection, AnalyzeXML* pIncoming, soarxml::ElementXML* pResponse)
+{
+	std::string s = pAgentSML->GetSoarAgent()->svs_instance->get_output();
+	return this->ReturnResult(pConnection, pResponse, s.c_str()) ;
+}
+
Index: Core/KernelSML/src/KernelHeaders.h
===================================================================
--- Core/KernelSML/src/KernelHeaders.h	(revision 13480)
+++ Core/KernelSML/src/KernelHeaders.h	(working copy)
@@ -29,3 +29,4 @@
 #include "symtab.h"
 #include "io_soar.h"
 #include "wmem.h"
+#include "svs.h"
